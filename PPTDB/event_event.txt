-- Table: public.event_event

-- DROP TABLE IF EXISTS public.event_event;

CREATE TABLE IF NOT EXISTS public.event_event
(
    id uuid NOT NULL,
    event_id_a uuid NOT NULL,
    event_id_b uuid NOT NULL,
    relationship_type_id uuid NOT NULL,
    description text COLLATE pg_catalog."default",
    role_id uuid,
    last_updated timestamp with time zone,
    CONSTRAINT "Event_Event_pkey" PRIMARY KEY (id),
    CONSTRAINT "EventID_A_EventTable" FOREIGN KEY (event_id_a)
        REFERENCES public.event (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT "EventID_B_EventTable" FOREIGN KEY (event_id_b)
        REFERENCES public.event (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT "RoleID_RoleTable" FOREIGN KEY (role_id)
        REFERENCES public.role (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.event_event
    OWNER to postgres;
-- Index: fki_EventID_A_EventTable

-- DROP INDEX IF EXISTS public."fki_EventID_A_EventTable";

CREATE INDEX IF NOT EXISTS "fki_EventID_A_EventTable"
    ON public.event_event USING btree
    (event_id_a ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: fki_EventID_B_EventTable

-- DROP INDEX IF EXISTS public."fki_EventID_B_EventTable";

CREATE INDEX IF NOT EXISTS "fki_EventID_B_EventTable"
    ON public.event_event USING btree
    (event_id_b ASC NULLS LAST)
    TABLESPACE pg_default;

-- Trigger: event_event_trigger

-- DROP TRIGGER IF EXISTS event_event_trigger ON public.event_event;

CREATE TRIGGER event_event_trigger
    BEFORE INSERT OR UPDATE 
    ON public.event_event
    FOR EACH ROW
    EXECUTE FUNCTION public.record_data_changed();